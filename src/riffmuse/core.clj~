(ns riffmuse.core
  (:require [clojure.string :as s]
            [riffmuse.riff :as riff]
            [instaparse.core :as insta])
  (:gen-class :main true))

(def ^:private help
"riffmuse is a command-line tool that algorithmically generates notes within a given scale, hopefully inspiring you to create a riff using those notes.

It takes only one command-line argument, representing the scale you'd like your riff in.

Examples:

    riffmuse a     (A minor)
    riffmuse A     (A major)
    riffmuse Db    (D-flat major)
    riffmuse Df    (D-flat major -- same as Db)
    riffmuse cs    (C-sharp minor)
    riffmuse o     (octatonic 1)
    riffmuse o2    (octatonic 2)
    riffmuse x     (chromatic)
    
Or, if you'd prefer, you can type out the full name of the scale, for instance,

    riffmuse Bb minor
    riffmuse bb minor
    riffmuse B flat minor
    riffmuse octatonic
    etc.
    
Running 'riffmuse help' or 'riffmuse h' will bring up this help text.")

(def ^:private parse-cli-args
  (insta/parser "
    scale     = root | no-root

    root      = pitch <ows> (major | minor)?
    major     = 'major' | 'maj'
    minor     = 'minor' | 'min' | 'm'
    pitch     = letter <ows> (sharp | flat | natural)?
    letter    = #'[A-Ga-g]'
    sharp     = 'sharp' | 's' 
    flat      = 'flat' | 'f' | 'b'
    natural   = 'natural' | 'nat'

    no-root   = octatonic | chromatic
    octatonic = ('octatonic' | 'o') <ows> #'[1-2]'?
    chromatic = 'chromatic' | 'x'

    <ows>     = #'[\\s-_]*'
    "))

(defn- parse-scale [[_ [tag & content]]]
  "Takes the parse tree output by parse-cli-args and returns the set of notes
   representing the appropriate scale.")

(defn -main
  "Parses command-line args and dispatches the appropriate functions.
   If no arguments are given, displays the help text."
  ([] (-main "help"))
  ([& args]
    (let [args-string (s/join args)]
      (if (re-find #"help|^h" args-string)
        (println help)
        (parse-scale (parse-cli-args args-string))))))
